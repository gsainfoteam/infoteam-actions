name: Deploy given service

on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      service:
        required: true
        type: string
        description: Service to deploy, with format apps/<servername>/<servicename>

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy service

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set Environment
      id: set_env
      run: |
        APP=$( echo ${{ inputs.service }} | cut -d / -f3 )
        SERVER=$( echo ${{ inputs.service }} | cut -d / -f2)

        if [ -f "$(dirname ${{ inputs.service }})/.proxy_host" ]; then
          PROXY_SERVER=$( cat "$(dirname ${{ inputs.service }})/.proxy_host" | tr [:lower:] [:upper:] )
          echo "::set-output name=proxy::true"
          echo "::set-output name=proxy_server::$PROXY_SERVER"
        else
          echo "::set-output name=proxy::false"
        fi

        echo "::set-output name=server_upper::$( echo $SERVER | tr [:lower:] [:upper:] )"
        echo "::set-output name=server_lower::$( echo $SERVER | tr [:upper:] [:lower:] )"
        echo "::set-output name=app::$APP"
        echo "::set-output name=remote-path::~/applications/$APP/"


    - name: Upload Files (Without Proxy)
      id: upload_withoutproxy
      uses: appleboy/scp-action@master
      if: steps.set_env.outputs.proxy == 'false'
      with:
        host: ${{ secrets[format('{0}_SSH_HOST', steps.set_env.outputs.server_upper)] }}
        port: ${{ secrets[format('{0}_SSH_PORT', steps.set_env.outputs.server_upper)] }}
        username: ${{ secrets[format('{0}_SSH_USERNAME', steps.set_env.outputs.server_upper)] }}
        key: ${{ secrets[format('{0}_SSH_PRIVATE_KEY', steps.set_env.outputs.server_upper)] }}
        source: "${{ inputs.service }}"
        target: "${{ steps.set_env.outputs.remote-path }}"
        strip_components: 3
        overwrite: true
    
    - name: Upload Files (With Proxy)
      id: upload_withproxy
      uses: appleboy/scp-action@master
      if: steps.set_env.outputs.proxy == 'true'
      with:
        host: ${{ secrets[format('{0}_SSH_HOST', steps.set_env.outputs.server_upper)] }}
        port: ${{ secrets[format('{0}_SSH_PORT', steps.set_env.outputs.server_upper)] }}
        username: ${{ secrets[format('{0}_SSH_USERNAME', steps.set_env.outputs.server_upper)] }}
        key: ${{ secrets[format('{0}_SSH_PRIVATE_KEY', steps.set_env.outputs.server_upper)] }}
        proxy_host: ${{ secrets[format('{0}_SSH_HOST', steps.set_env.outputs.proxy_server)] }}
        proxy_port: ${{ secrets[format('{0}_SSH_PORT', steps.set_env.outputs.proxy_server)] }}
        proxy_username: ${{ secrets[format('{0}_SSH_USERNAME', steps.set_env.outputs.proxy_server)] }}
        proxy_key: ${{ secrets[format('{0}_SSH_PRIVATE_KEY', steps.set_env.outputs.proxy_server)] }}
        source: "${{ inputs.service }}"
        target: "${{ steps.set_env.outputs.remote-path }}"
        strip_components: 3
        overwrite: true
    
    - name: Execute Service (Without Proxy)
      id: execute_withoutproxy
      uses: appleboy/ssh-action@master
      if: steps.set_env.outputs.proxy == 'false'
      with:
        host: ${{ secrets[format('{0}_SSH_HOST', steps.set_env.outputs.server_upper)] }}
        port: ${{ secrets[format('{0}_SSH_PORT', steps.set_env.outputs.server_upper)] }}
        username: ${{ secrets[format('{0}_SSH_USERNAME', steps.set_env.outputs.server_upper)] }}
        key: ${{ secrets[format('{0}_SSH_PRIVATE_KEY', steps.set_env.outputs.server_upper)] }}
        script: |
          set -eo pipefail
          
          cd ${{ steps.set_env.outputs.remote-path }}

          if [ -f "pre-source.sh" ]; then
            source ./pre-source.sh
          fi
          if [ -f "pre-exec.sh" ]; then
            chmod +x ./pre-exec.sh
            bash -c ./pre-exec.sh
          fi

          if [ -f "exec.sh" ]; then
            chmod +x ./exec.sh
            bash -c ./exec.sh
          elif [ -f "docker-compose.yml" ]; then
            docker compose up -d --wait --force-recreate --remove-orphans
          else
            exit 1
          fi

    - name: Execute Service (With Proxy)
      id: execute_withproxy
      uses: appleboy/ssh-action@master
      if: steps.set_env.outputs.proxy == 'true'
      with:
        host: ${{ secrets[format('{0}_SSH_HOST', steps.set_env.outputs.server_upper)] }}
        port: ${{ secrets[format('{0}_SSH_PORT', steps.set_env.outputs.server_upper)] }}
        username: ${{ secrets[format('{0}_SSH_USERNAME', steps.set_env.outputs.server_upper)] }}
        key: ${{ secrets[format('{0}_SSH_PRIVATE_KEY', steps.set_env.outputs.server_upper)] }}
        proxy_host: ${{ secrets[format('{0}_SSH_HOST', steps.set_env.outputs.proxy_server)] }}
        proxy_port: ${{ secrets[format('{0}_SSH_PORT', steps.set_env.outputs.proxy_server)] }}
        proxy_username: ${{ secrets[format('{0}_SSH_USERNAME', steps.set_env.outputs.proxy_server)] }}
        proxy_key: ${{ secrets[format('{0}_SSH_PRIVATE_KEY', steps.set_env.outputs.proxy_server)] }}
        script: |
          set -eo pipefail
          
          cd ${{ steps.set_env.outputs.remote-path }}

          if [ -f "pre-source.sh" ]; then
            source ./pre-source.sh
          fi
          if [ -f "pre-exec.sh" ]; then
            chmod +x ./pre-exec.sh
            bash -c ./pre-exec.sh
          fi

          if [ -f "exec.sh" ]; then
            chmod +x ./exec.sh
            bash -c ./exec.sh
          elif [ -f "docker-compose.yml" ]; then
            docker compose up -d --wait --force-recreate --remove-orphans
          else
            exit 1
          fi

    - name: Report
      id: report
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status : ${{ job.status }}
        author_name: Deployment to ${{ steps.set_env.outputs.server_lower }}/${{ steps.set_env.outputs.app }}
        fields: repo,commit,message
        mention: channel
        if_mention: failure,cancelled
      env:
        SLACK_WEBHOOK_URL: ${{ secrets['SLACK_WEBHOOK_URL'] }}